MySql基础:
    单进程多线程:
        用户连接: 连接线程
        
        MYSQL数据文件类型:
            数据文件、索引文件
            重做日志、撤销日志、二进制日志、查询日志、慢查询日志、(中继日志)
    DDL & DML
        索引管理:
                按特定数据结构存储的数据;
            索引类型:
                聚集索引、非聚集索引: 数据是否与索引存储在一起
                主键索引、辅助索引L: 
                稠密索引、稀疏索引: 是否索引了每一个数据项
                B+ TREE、HASH、R TREE、
                简单索引、组合索引

                左前缀索引
                覆盖索引

            管理索引的途径:
                创建索引: 创建表时指定， CREATE INDEX
                创建或删除索引: 修改表的命令
                删除索引: DROP INDEX
                
                查看表上的索引:
                    SHOW {INDEX | INDEXES | KEYS}
                        {FROM | IN} tbl_name
                        [{FROM | IN} db_name]
                        [WHERE expr]

                EXPLAIN
        视图(view):
            虚表
            创建视图
                CREATE
                    [OR REPLACE]
                    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]
                    [DEFINER = { user | CURRENT_USER }]
                    [SQL SECURITY { DEFINER | INVOKER }]
                    VIEW view_name [(column_list)]
                    AS select_statement
                    [WITH [CASCADED | LOCAL] CHECK OPTION]
            删除视图
                DROP VIEW [IF EXISTS]
                    view_name [, view_name] ...
                    [RESTRICT | CASCADE]
            视图中的数据事实上存储于"基表"中，因此，其修改操作也会针对于基表实现，其基表操作受基表限制;
        DML:
            INSERT, DELETE, UPDATE, SELECT
        DQL:
            SELECT:
                Query Cache

                查询执行路径中的组件: 查询缓存、解析器、预处理器、优化器、查询执行引擎、存储引擎
                mysql查询语句逻辑查询步骤:
                    FROM Clause --> WHERE Clause(选择) --> GROUP BY --> HAVING Clause --> ORDER BY --> SELECT(投影) --> LIMIT
                单表查询:
                    SELECT:
                        [ALL | DISTINCT | DISTINCTROW ]
                          [SQL_CACHE | SQL_NO_CACHE]
                        DISTINCT: 数据去重
                        SQL_CACHE: 显式指定存储查询结果于缓存之中
                            query_cache_type的值为"ON"表示查询缓存功能开启
                                SELECT的结果符合缓存条件即会保存，否则不予缓存

                        SQL_NO_CACHE: 不予以缓存
                            query_cache_type的值为"DEMAND"表示查询缓存功能按需进行
                                显式指定SQL_CACHE的SELECT的语句才会缓存，否则不予缓存
                    字段显示可以使用别名:
                        col1 AS alias1, col2 AS alias2
                    WHERE字句: 指明过滤条件以实现"选择"的功能
                        过滤条件: 布尔型表达式

                        算术操作符:
                        比较操作符:

                            BETWEEN min_num AND max_num
                            IN (elementl,element2, ...)
                            IS NULL
                            IS NOT NULL
                            LIKE: 通配符
                                %: 任意长度的任意字符
                                -: 任意单个字符
                            RLIKE: 正则匹配
                            REGEXP: 匹配字符串可使用正则表达式书写模式
                        逻辑操作符:
                            NOT
                            AND
                            OR
                            XOR
                    GROUP BY: 根据指定的条件把结果进行"分组"以用于聚合运算
                        avg(), max(), min(), count(), sum()
                        HAVING: 对分组聚合运算后的结果指定过滤条件
                    ORDER BY: 按照指定的字段对查询结果进行排序操作
                        升序: ASC
                        降序: DESC
                    LIMIT [[offset,]row_count]: 对查询的结果进行输出行数量限制

                    对查询结果中的数据请求施加"锁":
                        FOR UPDATE: 写锁，排他锁
                        LOCK IN SHARE MODE: 读锁，共享锁
                多表查询:
                    交叉连接，笛卡尔乘积
                    内连接:
                        等值连接: 让表之间的字段以"等值"建立连接关系;
                        不等值连接: 
                        自然连接
                        自连接

                    外连接:
                        左外连接
                            FROM tb1 LEFI JOIN tb2 ON tb1.col=tb2.col
                        右外连接
                            FROM tb1 RIGHT JOIN tb2 ON tb1.col=tb2.col
                子查询: 在查询语句嵌套着查询语句
                    基于某语句的查询结果再次运行的查询
                    
                    用在WHERE子句的子查询:
                        (1) 用于比较表达式的子嵌套，子查询只能返回单个值
                        (2) 用于IN中的子查询，子查询应该单键查询返回一个或多个值构成列表
                        (3) 用于EXISTS
                    
                    用在FROM子句的子查询: 
                        使用格式: SELECT tb1_alias.col1,... FROM (SELECT Clause) AS tb_alias WHERE Clause;
                联合查询: UNION
                    


