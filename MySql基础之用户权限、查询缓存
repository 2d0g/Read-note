用户、权限管理及查询缓存

    权限级别:
        库级别
        表级别
        字段级别
        管理类
        程序类

        管理类:
            CREATE TEMPORARY TABLES
            CREATE USER
            FILE
            SUPER
            SHOW DATABASES
            RELOAD
            SHUTDOWN
            REPLICATION SLAVE
            REPLICATION CLIENT
            LOCK TABLES
            PROCESS
        程序类:
            FUNCTION
            PROCEDURE
            TRIGGER

            CREATE, ALTER, DROP, EXCUTE
        库和表级别: TABLES OR DATABASE
            ALTER
            CREATE
            CREATE VIEW
            DROP
            INDEX
            SHOW VIEW
            GRANT OPTION: 能够把自己获得的权限赠给其他用户一个副本
        数据操作:
            SELECT
            INSERT
            DELETE
            UPDATE
        字段级别:
            SELECT(col1, col2,...)
            UPDATE(col1, col2,...)
            INSERT(col1, col2,...)
        所有: ALL PRIVILEGES, ALL
        元数据数据库:
            授权表:
                db, host, user
                columns_priv, tables_priv, proc_priv, proxies_priv
    用户账号:
        'USERNAME'@'HOST'
            @'HOST':
                主机名
                ip或network
                通配符
                    %，_: 172.16.%.%
        创建用户:
            CREATE USER 'username'@'host' [IDENTIFIED BY 'password'];
            查看用户获得的授权: SHOW GRANT FOR 
                SHOW GRANTS FOR 'USERNAME'@'HOST';
        重命名用户: RENAME USER
            RENAME USER old_user_name TO new_user_name;
        删除用户: DROP USER 'USERNAME'@'HOST'

        修改密码:
            (1) SET PASSWORD FOR 
            (2) UPDATE mysql.user SET password=PASSWORD('your_password') WHERE user='your_name';
            (3) mysqladmin password 
        忘记管理员密码的解决办法:
            (1) 启动mysqld进程时，为其使用 --skip-grant-tables --skip-networking
            (2) 使用上述 UPDATE 命令修改管理员秘密
            (3) 关闭msyql进程，移除 --skip参数
    授权: GRANT
        GRANT priv_type[,...] on [{table|function|procedure}] db.{table|routine} TO 'USERNAME'@'HOST' [IDENTIFIED BY 'password'] [REQUIRE SSL] [WITH with_option];
        with_option:
              GRANT OPTION
            | MAX_QUERIES_PER_HOUR count : 每小时多大的查询次数
            | MAX_UPDATES_PER_HOUR count
            | MAX_CONNECTIONS_PER_HOUR count
            | MAX_USER_CONNECTIONS count
    取消授权:
        REVOKE
            priv_type [(column_list)]
            [, priv_type [(column_list)]] ...
            ON [object_type] priv_level
            FROM user [, user] ...

            注意:
                object_type:
                    TABLE
                | FUNCTION
                | PROCEDURE

                priv_level:
                    *
                | *.*
                | db_name.*
                | db_name.tbl_name
                | tbl_name
                | db_name.routine_name
    查询缓存:
        如何判断是否命中:
            通过查询语句的HASH值判断，哈希值考虑的因素包括
                查询本身，要查询的数据库、客户端使用协议版本，...
            
        那些查询可能不会保存？
            包含用户自定义函数，存储函数，用户自定义变量、临时表、mysql库中的系统表、或包含列级权限的表、不确定值的函数 now()等
        
        查询缓存相关的服务器变量:
            query_cache_min_res_unit: 查询缓存中内存块的最小分配单位;
                较小值会减少浪费，但会导致更频繁的内存分配配操作
                较大值会带来浪费，会导致碎片过多
            query_cache_limit: 能够缓存的最大查询结果
                对于有着较大结果的查询语句，建议在SELECT中使用SQL_NO_CACHE
            query_cache_size: 查询缓存总共可用的内存空间每，单位是字节，必须是1024的整数倍;
            query_cache_type: ON, OFF, DEMAND
            query_cache_wlock_invalidate: 如果某表被其他的连接锁定，是否仍然从查询缓存中返回结果， 默认为OFF，表示在被锁定时返回， ON为不返回
        查询相关的状态变量
            SHOW GLOBAL STATUS LIKE 'Qcache%'
            缓存命中率的评估: Qcache_hits/(Qcache_hits+Com_select)


            
    
